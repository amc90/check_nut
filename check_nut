#! /usr/bin/perl -w


use strict;
use Getopt::Long;
use vars qw($opt_V $opt_h $opt_d $PROGNAME $UPSC $ret $str $opt_d $opt_bw $opt_bc $opt_tw $opt_tc $opt_lw $opt_lc $opt_i $opt_pd @lines $line $bCharge $uTemp $uLoad $uStatus $uModel $uTest $uVolt $lWarn $lCrit $tWarn $tCrit $perf @statuses $longStr);
use lib "/usr/lib/nagios/plugins" ;
use utils qw(%ERRORS &print_revision &support &usage);

$PROGNAME = "check_nut";
$UPSC = "/bin/upsc";

sub print_help ();
sub print_usage ();

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}=''; 
$ENV{'ENV'}='';

Getopt::Long::Configure('bundling');
GetOptions
	("V"    => \$opt_V,  "version"        => \$opt_V,
	 "d=s"  => \$opt_d,  "device=s"       => \$opt_d,
         "w=s"  => \$opt_bw, "battWarning=s"  => \$opt_bw,
         "c=s"  => \$opt_bc, "battCritical=s" => \$opt_bc,
         "t=s"  => \$opt_tw, "tempWarning=s"  => \$opt_tw,
         "T=s"  => \$opt_tc, "tempCritical=s" => \$opt_tc,
         "l=s"  => \$opt_lw, "loadWarning=s"  => \$opt_lw,
         "L=s"  => \$opt_lc, "loadCritical=s" => \$opt_lc,
         "p"    => \$opt_pd, "perfData"       => \$opt_pd,
         "i"    => \$opt_i,  "ignoredaemonstate"   => \$opt_i,
	 "h"    => \$opt_h,  "help"           => \$opt_h);

if ($opt_V) {
	print_revision($PROGNAME,'$Revision: 1.1 $');
	exit $ERRORS{'OK'};
}

if ($opt_h) {print_help(); exit $ERRORS{'OK'};}

($opt_d) || ($opt_d = shift) || usage("Device not specified\n");
($opt_bw) || ($opt_bw = shift) || usage("Battery charge warning threshold not specified\n");
my $bWarn = $1 if ($opt_bw =~ /^([0-9]{1,2}?|100?)$/);
($bWarn) || usage("Invalid battery charge warning threshold: $opt_bw\n");
($opt_bc) || ($opt_bc = shift) || usage("Battery charge critical threshold not specified\n");
my $bCrit = $1 if ($opt_bc =~ /^([0-9]{1,2}?|100?)$/);
($bCrit) || usage("Invalid battery charge critical threshold: $opt_bc\n");
($opt_tw) || ($opt_tw = shift) || ($opt_tw = '');
if($opt_tw ne '')
{
  $tWarn = $1 if ($opt_tw =~ /^([0-9]{1,2})(\.[0-9]{1,2})?$/);
  ($tWarn) || usage("Invalid temperature warning threshold: $opt_tw\n");
}
else
{
  $tWarn = 0;
}
($opt_tc) || ($opt_tc = shift) || ($opt_tc = '');
if($opt_tc ne '')
{
  $tCrit = $1 if ($opt_tc =~ /^([0-9]{1,2})(\.[0-9]{1,2})?$/);
  ($tCrit) || usage("Invalid temperature critical threshold: $opt_tc\n");
}
else
{
  $tCrit = 0;
}
($opt_lw) || ($opt_lw = shift) || ($opt_lw = '');
if($opt_lw ne '')
{
  $lWarn = $1 if ($opt_lw =~ /^([0-9]{1,2})(\.[0-9]{1,2})?$/);
  ($lWarn) || usage("Invalid load warning threshold: $opt_lw\n");
}
else
{
  $lWarn = 0;
}
($opt_lc) || ($opt_lc = shift) || ($opt_lc = '');
if($opt_lc ne '')
{
  $lCrit = $1 if ($opt_lc =~ /^([0-9]{1,2})(\.[0-9]{1,2})?$/);
  ($lCrit) || usage("Invalid load critical threshold: $opt_lc\n");
}
else
{
  $lCrit = 0;
}

$ret=0;
unless($opt_i)
{
  $str = `/bin/ps axuwf | /bin/grep "/upsd\$" | /bin/grep -v grep`;
  ret_inc($?);
}

if($ret == 0)
{
  @lines = `$UPSC $opt_d`;
  $bCharge = 0;
  $uTemp = 0;
  $uLoad = 0;
  $uStatus = 0;
  $uModel = '';

  foreach $line (@lines)
  {
    $line =~ s/[\n\r]//g;
    $bCharge = $1 if($line =~ /^battery\.charge\: *(.*)/);
    $uTemp   = $1 if($line =~ /^ups\.temperature\: *(.*)/);
    $uLoad   = $1 if($line =~ /^ups\.load\: *(.*)/);
    $uStatus = $1 if($line =~ /^ups\.status\: *(.*)/);
    $uModel  = $1 if($line =~ /^ups\.model\: *(.*)/);
    $uTest   = $1 if($line =~ /^ups\.test\.result\: *(.*)/);

    #Used only for perfdata
    $uVolt   = $1 if($line =~ /^battery\.voltage\: *(.*)/);
  }
  $perf = "";
  if($opt_pd)
  {
    $perf .= " | Charge=$bCharge%;$bWarn;$bCrit Temp=$uTemp;$tWarn;$tCrit Load=$uLoad%;$lWarn;$lCrit";
    $perf .= " Voltage=$uVolt" if defined($uVolt);
    $perf .= "";
  }
  $longStr="\n";
  if($bCharge < $bWarn && $bCharge >= $bCrit && $bWarn ne '')
  {
    ret_inc(1);
    $longStr.="Battery warning: $bCharge\n";
  }
  if($bCharge < $bCrit && $bCrit ne '')
  {
    ret_inc(2);
    $longStr.="Battery critical: $bCharge\n";
  }
  if($uTemp > $tWarn && $uTemp <= $tCrit && $tWarn != 0)
  {
    ret_inc(1);
    $longStr.="Temperature warning: $uTemp\n";
  }
  if($uTemp > $tCrit && $tCrit != 0)
  {
    ret_inc(2);
    $longStr.="Temperature critical: $uTemp\n";
  }
  if($uLoad > $lWarn && $uLoad <= $lCrit && $lWarn != 0)
  {
    ret_inc(1);
    $longStr.="UPS-Load warning: $uLoad\n";
  }
  if($uLoad > $lCrit && $lCrit != 0)
  {
    ret_inc(2);
    $longStr.="UPS-Load critical: $uLoad\n";
  }
  ret_inc(0), $longStr.="On line (mains is present)\n"
    if($uStatus =~ m/(?:^| )OL(?:$| )/);
  ret_inc(2), $longStr.="On Battery (mains is not present)\n"
    if($uStatus =~ m/(?:^| )OB(?:$| )/);
  ret_inc(1), $longStr.="Low Battery\n"
    if($uStatus =~ m/(?:^| )LB(?:$| )/);
  ret_inc(1), $longStr.="The battery needs to be replaced\n"
    if($uStatus =~ m/(?:^| )RB(?:$| )/);
  ret_inc(0), $longStr.="The battery is charging\n"
    if($uStatus =~ m/(?:^| )CHRG(?:$| )/);
  ret_inc(1), $longStr.="The battery is discharging (inverter is providing load power)\n"
    if($uStatus =~ m/(?:^| )DISCHRG(?:$| )/);
  ret_inc(1), $longStr.="UPS bypass circuit is active - no battery protection is available\n"
    if($uStatus =~ m/(?:^| )BYPASS(?:$| )/);
  ret_inc(0), $longStr.="UPS is currently performing runtime calibration (on battery)\n"
    if($uStatus =~ m/(?:^| )CAL(?:$| )/);
  ret_inc(1), $longStr.="UPS is offline and is not supplying power to the load\n"
    if($uStatus =~ m/(?:^| )OFF(?:$| )/);
  ret_inc(2), $longStr.="UPS is overloaded\n"
    if($uStatus =~ m/(?:^| )OVER(?:$| )/);
  ret_inc(1), $longStr.="UPS is trimming incoming voltage\n"
    if($uStatus =~ m/(?:^| )TRIM(?:$| )/);
  ret_inc(1), $longStr.="UPS is boosting incoming voltage\n"
    if($uStatus =~ m/(?:^| )BOOST(?:$| )/);
  ret_inc(3), $longStr.="Forced Shutdown\n"
    if($uStatus =~ m/(?:^| )FSD(?:$| )/);
  @statuses=("OK", "WARNING", "CRITICAL", "UNKNOWN");
  print "UPS $opt_d ($uModel) $statuses[$ret]: battery charge: $bCharge, temperature: $uTemp, load: $uLoad$perf$longStr";
}
else
{
  print "NUT Daemon DOWN\n";
  ret_inc(3);
}

exit $ERRORS{'UNKNOWN'} if ($ret == 3);
exit $ERRORS{'CRITICAL'} if ($ret == 2);
exit $ERRORS{'WARNING'} if ($ret == 1);
exit $ERRORS{'OK'};


sub print_usage () {
       print "Usage:\n$PROGNAME -d <device> -w <battery charge warning> -c <battery charge critical> -t <temperature warning> -T <temperature critical> -l <ups load warning> -L <ups load critical> [-i|--ignoredaemonstate] [-p|--perfdata]\n\n";
}

sub print_help () {
	print_revision($PROGNAME,'$Revision: 1.1 $');
	print "Copyright (c) 2007- Luca Bertoncello <lucabert\@lucabert.de>

This plugin reports the status of the UPS using NUT

";
	print_usage();
	support();
}

sub ret_inc
{
  $ret=$_[0]
    if($ret<$_[0]);
}
