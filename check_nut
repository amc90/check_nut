#! /usr/bin/perl -w

use strict;
use Getopt::Long;
use lib "/usr/lib/nagios/plugins" ;
use utils qw(%ERRORS &print_revision &support &usage);

use constant PROGNAME => "check_nut";
use constant UPSC => "/bin/upsc";
use constant VERSION => '1.2';

$ENV{'PATH'}='';
$ENV{'BASH_ENV'}=''; 
$ENV{'ENV'}='';

Getopt::Long::Configure('bundling');
my %OPT_SCHEMA=(
	version           => { short=>"V", args=>""},
	device            => { short=>"d", args=>"=s", valid=>qr/^[a-zA-Z][-._a-zA-Z0-9]*(@([a-zA-Z][-._a-zA-Z0-9]*|[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}))?$/},
	battWarning       => { short=>"w", args=>"=s", default=>80, valid=>qr/^([0-9]{1,2}?|100?)$/},
	battCritical      => { short=>"c", args=>"=s", default=>50, valid=>qr/^([0-9]{1,2}?|100?)$/},
	tempWarning       => { short=>"t", args=>"=s", default=>50, valid=>qr/^([0-9]{1,2})(\.[0-9]{1,2})?$/},
	tempCritical      => { short=>"T", args=>"=s", default=>55, valid=>qr/^([0-9]{1,2})(\.[0-9]{1,2})?$/},
	loadWarning       => { short=>"l", args=>"=s", default=>50, valid=>qr/^([0-9]{1,2})(\.[0-9]{1,2})?$/},
	loadCritical      => { short=>"L", args=>"=s", default=>75, valid=>qr/^([0-9]{1,2})(\.[0-9]{1,2})?$/},
	help              => { short=>"h", args=>""},
);

#Wrangle arg_format into a suitable input for GetOptions
my %opt=();
my %arg_format=map { (
	$_.                    $OPT_SCHEMA{$_}{args}=>\($opt{$_}),
	$OPT_SCHEMA{$_}{short}.$OPT_SCHEMA{$_}{args}=>\($opt{$_})
	) } keys %OPT_SCHEMA;
GetOptions(%arg_format);

#Apply validation functions to populated opt array.
%opt=map {
	my $val=$opt{$_} || $OPT_SCHEMA{$_}{default};
	my $valid=$OPT_SCHEMA{$_}{valid} || qr/.*/;
	usage("Invalid value for --$_ $val doesn't match $valid\n") if $valid && $val && ($val!~$valid);
	($_=>$val);
	} keys %opt;

if ($opt{"version"}) {
	print_revision(PROGNAME,'$Revision: '.VERSION.' $');
	exit $ERRORS{'OK'};
}
if (scalar(@ARGV) || ($opt{"help"})) {
	print_help();
	exit $ERRORS{'OK'};
}
$opt{device} || usage("Device not specified\n");

#Ideally this would grep out certain lines from stderr, but in lieu of that:
open(STDERR, ">/dev/null");
open(EXEC, '-|', UPSC, $opt{device}) or bad_exit("Error running UPSC: $!");

my %stats;
while(<EXEC>) {
	chomp;
	$stats{$1}=$2 if($_ =~ /^([a-z.]+)\: *(.*)/);
}
close EXEC or bad_exit("Bad UPSC exit code: $? $!");

for (qw(battery.charge ups.temperature ups.load ups.status)) {
	bad_exit("NUT failed to return an entry: ".$_) unless defined($stats{$_});
}

my ($status, $status_str)=status_info();
printf "UPS %s (%s) %s: battery charge: %d%%, temperature: %0.2f, load: %0.2f | %s\n%s\n",
	$opt{device}, $stats{'ups.model'}, $status, $stats{'battery.charge'}, $stats{'ups.temperature'}, $stats{'ups.load'}, perf_info(), $status_str;
exit $ERRORS{$status};


sub print_help {
	print_revision(PROGNAME,'$Revision: '.VERSION.' $');
	print "Copyright (c) 2007- Luca Bertoncello <lucabert\@lucabert.de>

This plugin reports the status of the UPS using NUT

";
	print "Usage:\n".PROGNAME.' -d <device@host> [other options]';
	print "\n\nOption list:\n\n";
	for (sort keys(%OPT_SCHEMA)) {
		printf "   -%s, --%s\n", $OPT_SCHEMA{$_}{short}, $_;
	}
	print "\n\n";
	support();
}

sub bad_exit {
	printf "UPS %s (%s) CRITICAL: %s\n", $opt{device}, $stats{"ups.model"}||"ups.model not given", pop;
	exit $ERRORS{"CRITICAL"}
}

sub perf_info {
	my @ret=();
	push @ret, sprintf("Charge=%d%%;%d;%d", $stats{'battery.charge'}, $opt{battWarning}, $opt{battCritical});
	push @ret, sprintf("Temp=%0.2f;%0.2f;%0.2f", $stats{'ups.temperature'}, $opt{tempWarning}, $opt{tempCritical});
	push @ret, sprintf("Load=%0.2f;%0.2f;%0.2f", $stats{'ups.load'}, $opt{loadWarning}, $opt{loadCritical});
	push @ret, sprintf("Voltage=%0.2f", $stats{'battery.voltage'}) if defined($stats{'battery.voltage'});
	return join(" ", @ret);
}

#Return a tuple (applicable return code, newline delimited list of status strings)
sub status_info {
	my %status_info=(
		"Battery warning: $stats{'battery.charge'}"                         => [1, sub {$stats{'battery.charge'} < $opt{battWarning} && $stats{'battery.charge'} >= $opt{battCritical} }],
		"Battery critical: $stats{'battery.charge'}"                        => [2, sub {$stats{'battery.charge'} < $opt{battCritical} }],
		"Temperature warning: $stats{'ups.temperature'}"                    => [1, sub {$stats{'ups.temperature'} > $opt{tempWarning} && $stats{'ups.temperature'} <= $opt{tempCritical} }],
		"Temperature critical: $stats{'ups.temperature'}"                   => [2, sub {$stats{'ups.temperature'} > $opt{tempCritical} } ],
		"UPS-Load warning: $stats{'ups.load'}"                              => [1, sub {$stats{'ups.load'} > $opt{loadWarning} && $stats{'ups.load'} <= $opt{loadCritical} }],
		"UPS-Load critical: $stats{'ups.load'}"                             => [2, sub {$stats{'ups.load'} > $opt{loadCritical} }],
		"On line (mains is present)"                                        => [0, sub {$stats{'ups.status'} =~ m/(?:^| )OL(?:$| )/} ],
		"On Battery (mains is not present)"                                 => [2, sub {$stats{'ups.status'} =~ m/(?:^| )OB(?:$| )/} ],
		"Low Battery"                                                       => [1, sub {$stats{'ups.status'} =~ m/(?:^| )LB(?:$| )/} ],
		"The battery needs to be replaced"                                  => [1, sub {$stats{'ups.status'} =~ m/(?:^| )RB(?:$| )/} ],
		"The battery is charging"                                           => [0, sub {$stats{'ups.status'} =~ m/(?:^| )CHRG(?:$| )/} ],
		"The battery is discharging (inverter is providing load power)"     => [1, sub {$stats{'ups.status'} =~ m/(?:^| )DISCHRG(?:$| )/} ],
		"UPS bypass circuit is active - no battery protection is available" => [1, sub {$stats{'ups.status'} =~ m/(?:^| )BYPASS(?:$| )/} ],
		"UPS is currently performing runtime calibration (on battery)"      => [0, sub {$stats{'ups.status'} =~ m/(?:^| )CAL(?:$| )/} ],
		"UPS is offline and is not supplying power to the load"             => [1, sub {$stats{'ups.status'} =~ m/(?:^| )OFF(?:$| )/} ],
		"UPS is overloaded"                                                 => [2, sub {$stats{'ups.status'} =~ m/(?:^| )OVER(?:$| )/} ],
		"UPS is trimming incoming voltage"                                  => [1, sub {$stats{'ups.status'} =~ m/(?:^| )TRIM(?:$| )/} ],
		"UPS is boosting incoming voltage"                                  => [1, sub {$stats{'ups.status'} =~ m/(?:^| )BOOST(?:$| )/} ],
		"Forced Shutdown"                                                   => [3, sub {$stats{'ups.status'} =~ m/(?:^| )FSD(?:$| )/} ],
	);
	my @status_strings=grep {$status_info{$_}->[1]->()} keys %status_info ;
	my $status_code=(sort {$b <=> $a} map {$status_info{$_}->[0]} @status_strings)[0];

	return (qw(OK WARNING CRITICAL UNKNOWN)[$status_code], join("\n", sort @status_strings));
}

